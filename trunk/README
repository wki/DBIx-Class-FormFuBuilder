NAME
    DBIx::Class::FormFuBuilder

SYNOPSIS
        # inside your Model class:
        package YourApp::Model::DB;
        ...
        DBIx::Class->load_components('FormFuBuilder');
    
        ### TODO: implement this but rethink about it before
        ### TODO: does it make sense to allow code-refs instead of {} 
        ###       in order to decide? varchar(10) <-> varchar(40) <-> varchar(255)
        ###       nullable date <-> not-nullable date (+/- null checkbox)
        ### TODO: do we have different type-names for each database?
        ### TODO: or do this in the model class -- which is better?
        ### TODO: think about callbacks for eg. include JavaScript, CSS, ...
        # inside your Schema class (optionally):
        package DemoApp::Schema;
        ...
        # defaults for entire forms
        __PACKAGE__->form_fu_default({
            ... # standard form definitions like CSS, ...
        });
    
        # defaults for a named relation -- does this make sense? -- are names really unique?
        __PACKAGE__->form_fu_default(-sizes => {
            ... # meaningful defaults for relation 'sizes'
        });
    
        # defaults for 'integer'
        __PACKAGE__->form_fu_default(integer => {
            ... # meaningful defaults for 'integer' fields
        });
    
        # defaults for 'varchar' -- could 'character_varying' make sense???
        __PACKAGE__->form_fu_default('character varying' => {
            ### how to handle eg. size ???
        });
        ### end of TODO
    
        # inside your result classes do this:
        package DemoApp::Schema::Result::Product;
        ...
        __PACKAGE__->form_fu_extra(column_name => {...});
    
        # at any place you need a form
        my $form = $result_set->generate_form_fu({...});

    more examples to come!

DESCRIPTION
METHODS
  form_fu_default
    TODO...

  form_fu_extras
    specify some extra(s) that get into the {extra}->{form_fu} hash of a
    column

    meaningful things could be:

    title
    label
    constraints
    filters

  generate_form_fu
    generate a form from a resultset including all joined tables

    additionally a hash or a hashref with args may be added. Meaningful keys
    could be:

    action
    constraints
    indicator
        if an indicator is given but no submit field present, it will get
        autogenerated at the end of the form

    auto_fieldset
    auto_constraint_class
    attributes
    elements
        these elements will go to the beginning of the form

    append
        this is an additional element-array inserted at the end of the form

AUTHOR
    Wolfgang Kinkeldei, <wolfgang@kinkeldei.de>

LICENSE
    This library is free software, you can redistribute it and/or modify it
    under the same terms as Perl itself.

